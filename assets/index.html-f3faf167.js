import{_ as c,r,o as a,c as d,a as e,b as l,d as o,w as n,e as s}from"./app-fb07299a.js";const u={},g=e("h1",{id:"changelog-template-reference",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#changelog-template-reference","aria-hidden":"true"},"#"),l(" Changelog template reference")],-1),h={href:"https://tera.netlify.app/docs/#templates",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/cocogitto/cocogitto/tree/main/src/conventional/changelog/template",target:"_blank",rel:"noopener noreferrer"},_=e("h2",{id:"context",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#context","aria-hidden":"true"},"#"),l(" Context")],-1),m=e("h3",{id:"release",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#release","aria-hidden":"true"},"#"),l(" Release")],-1),f=e("p",null,[e("code",null,"commits"),l(" :")],-1),b=e("strong",null,"Type:",-1),y=e("code",null,"Array<Commit>",-1),x=e("li",null,[e("strong",null,"Description:"),l(" commits contained in the release")],-1),D=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"false")],-1),N=e("p",null,[e("code",null,"version"),l(" :")],-1),T=e("strong",null,"Type:",-1),k=e("code",null,"GitRef",-1),S=e("li",null,[e("strong",null,"Description:"),l(" tag name or/and git oid of the current release tip")],-1),w=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"false")],-1),j=e("p",null,[e("code",null,"from")],-1),v=e("strong",null,"Type:",-1),C=e("code",null,"GitRef",-1),R=e("li",null,[e("strong",null,"Description:"),l(" tag name or/and git oid of the commit preceding the release")],-1),q=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"false")],-1),E=s("<li><p><code>date</code></p><ul><li><strong>Type:</strong> <code>Date</code></li><li><strong>Description:</strong> date of the release</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",1),A=e("h3",{id:"commit",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#commit","aria-hidden":"true"},"#"),l(" Commit")],-1),V=s("<li><p><code>id</code>:</p><ul><li><strong>Type:</strong> <code>String</code>, <code>SHA-1</code></li><li><strong>Description:</strong> commit <code>SHA-1</code></li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",1),F=e("p",null,[e("code",null,"author"),l(":")],-1),L=e("li",null,[e("strong",null,"Type:"),l(),e("code",null,"String")],-1),B=e("strong",null,"Description:",-1),G=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"true")],-1),H=e("p",null,[e("code",null,"signature"),l(":")],-1),I=e("li",null,[e("strong",null,"Type:"),l(),e("code",null,"String")],-1),z=e("strong",null,"Description:",-1),O=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"false")],-1),Y=s("<li><p><code>type</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit type of the commit</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>date</code>:</p><ul><li><strong>Type:</strong> <code>Date</code></li><li><strong>Description:</strong> the date of the commit</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>scope</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the scope of the commit</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li><li><p><code>summary</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit message summary</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>body</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit message body</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li><li><p><code>breaking_change</code>:</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Description:</strong> is the commit marked as a breaking change</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",6),J=e("p",null,[e("code",null,"footer"),l(":")],-1),K=e("strong",null,"Type:",-1),M=e("code",null,"Array<Footer>",-1),P=e("li",null,[e("strong",null,"Description:"),l(" the conventional commit footers")],-1),Q=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"false")],-1),U=e("h3",{id:"gitref",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gitref","aria-hidden":"true"},"#"),l(" GitRef")],-1),W=e("p",null,[e("code",null,"tag"),l(":")],-1),X=e("li",null,[e("strong",null,"Type:"),l(),e("code",null,"String")],-1),Z=e("strong",null,"Description:",-1),$=e("code",null,"tag_prefix",-1),ee=e("code",null,"null",-1),le=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"true")],-1),oe=s("<li><p><code>id</code>:</p><ul><li><strong>Type:</strong> <code>Sting</code>, <code>SHA-1</code></li><li><strong>Description:</strong> the id of the latest commit in the release. This can be <code>null</code> only when using <code>cog bump</code>, because it generates a changelog before creating the target version.</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li>",1),te=s('<h3 id="footer" tabindex="-1"><a class="header-anchor" href="#footer" aria-hidden="true">#</a> Footer</h3><ul><li><code>token</code>: <ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the footer token</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><code>content</code>: <ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the footer content</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li></ul><h3 id="remote" tabindex="-1"><a class="header-anchor" href="#remote" aria-hidden="true">#</a> Remote</h3>',3),ne=e("code",null,"platform",-1),se=e("li",null,[e("strong",null,"Type:"),l(),e("code",null,"String")],-1),ie=e("strong",null,"Description:",-1),re=e("code",null,"https://{remote}",-1),ce=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"true")],-1),ae=e("code",null,"owner",-1),de=e("li",null,[e("strong",null,"Type:"),l(),e("code",null,"String")],-1),ue=e("strong",null,"Description:",-1),ge=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"true")],-1),he=e("code",null,"repository_url",-1),pe=e("code",null,"false",-1),_e=e("li",null,[e("strong",null,"Type:"),l(),e("code",null,"String")],-1),me=e("strong",null,"Description:",-1),fe=e("code",null,"https://{remote}/{owner}/{repository}",-1),be=e("li",null,[e("strong",null,"Nullable:"),l(),e("code",null,"true")],-1),ye=e("h2",{id:"filters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#filters","aria-hidden":"true"},"#"),l(" Filters")],-1),xe={href:"https://tera.netlify.app/docs/#built-ins",target:"_blank",rel:"noopener noreferrer"},De=s(`<ul><li><code>unscoped</code><ul><li><strong>Description:</strong> filter unscoped commits from releases commits. Example:</li><li><strong>Example:</strong></li></ul><div class="language-tera" data-ext="tera"><pre class="language-tera"><code>    {% <span class="hljs-meta">for </span>commit in commits | unscoped %}                                                                       
        {% <span class="hljs-number">if </span>commit.author %}                                                                                         
            {% <span class="hljs-built_in">set </span>author = <span class="hljs-string">&quot;@&quot;</span> ~ commit.author %}                                                                     
        {% <span class="hljs-number">else </span>%}                                                                                                     
            {% <span class="hljs-built_in">set </span>author = commit.signature %}                                                                        
        {% <span class="hljs-number">endif </span>%}                                                                                                    
            - <span class="hljs-keyword">{{ commit.id }}</span> - <span class="hljs-keyword">{{ commit.summary }}</span> - <span class="hljs-keyword">{{ author }}</span>
    {% <span class="hljs-meta">endfor </span>%}    
</code></pre></div></li><li><code>upper_first</code><ul><li><strong>Description:</strong> capitalize the first letter of a string</li><li><strong>Example:</strong></li></ul><div class="language-tera" data-ext="tera"><pre class="language-tera"><code>   {% <span class="hljs-meta">for </span>type, typed_commits in commits | sort(attribute=<span class="hljs-string">&quot;type&quot;</span>)| group_by(attribute=<span class="hljs-string">&quot;type&quot;</span>) %}                           
    #### <span class="hljs-keyword">{{ type | upper_first }}</span>
   {% <span class="hljs-meta">endfor </span>%}
</code></pre></div></li></ul>`,1);function Ne(Te,ke){const i=r("ExternalLinkIcon"),t=r("RouterLink");return a(),d("div",null,[g,e("p",null,[l("For a detailed guide on how to write a template changelog refer to "),e("a",h,[l("tera's documentation"),o(i)]),l(".")]),e("p",null,[l("You can also take a look at the "),e("a",p,[l("built-in templates"),o(i)]),l(" in cocogitto repository.")]),_,m,e("ul",null,[e("li",null,[f,e("ul",null,[e("li",null,[b,l(),o(t,{to:"/template/#commit"},{default:n(()=>[y]),_:1})]),x,D])]),e("li",null,[N,e("ul",null,[e("li",null,[T,l(),o(t,{to:"/template/#gitref"},{default:n(()=>[k]),_:1})]),S,w])]),e("li",null,[j,e("ul",null,[e("li",null,[v,l(),o(t,{to:"/template/#gitref"},{default:n(()=>[C]),_:1})]),R,q])]),E]),A,e("ul",null,[V,e("li",null,[F,e("ul",null,[L,e("li",null,[B,l(" the name of the "),o(t,{to:"/config/#authors"},{default:n(()=>[l("commit author")]),_:1}),l(" on the remote platform")]),G])]),e("li",null,[H,e("ul",null,[I,e("li",null,[z,l(" the git signature of the "),o(t,{to:"/config/#authors"},{default:n(()=>[l("commit author")]),_:1})]),O])]),Y,e("li",null,[J,e("ul",null,[e("li",null,[K,l(),o(t,{to:"/template/#footer"},{default:n(()=>[M]),_:1})]),P,Q])])]),U,e("ul",null,[e("li",null,[W,e("ul",null,[X,e("li",null,[Z,l(" a SemVer tag name, with an optional "),o(t,{to:"/config/#tag_prefix"},{default:n(()=>[$]),_:1}),l(". "),ee,l(" if the version is pointing to unreleased changes.")]),le])]),oe]),te,e("ul",null,[e("li",null,[ne,l(": "),e("ul",null,[se,e("li",null,[ie,l(" url to the configured git platform in the form "),re,l(" ( see: "),o(t,{to:"/config/#remote"},{default:n(()=>[l("Config -> Changelog -> Remote")]),_:1}),l(")")]),ce])]),e("li",null,[ae,l(": "),e("ul",null,[de,e("li",null,[ue,l(" name of the repository owner (see: "),o(t,{to:"/config/#owner"},{default:n(()=>[l("Config -> Changelog -> Owner")]),_:1}),l(")")]),ge])]),e("li",null,[he,l(": "),pe,e("ul",null,[_e,e("li",null,[me,l(" url to the repository in the form "),fe,l("( see: "),o(t,{to:"/config/#owner"},{default:n(()=>[l("Config -> Changelog -> repository")]),_:1}),l(")")]),be])])]),ye,e("p",null,[l("In addition to the "),e("a",xe,[l("tera built-in filters"),o(i)]),l(" you can use the following:")]),De])}const we=c(u,[["render",Ne],["__file","index.html.vue"]]);export{we as default};
