import{_ as n,r as i,o as p,c,a as e,d as l,w as o,b as a,e as t}from"./app-fb07299a.js";const r={},u=t('<h1 id="configuration-reference" tabindex="-1"><a class="header-anchor" href="#configuration-reference" aria-hidden="true">#</a> Configuration reference</h1><p>The config reference list all value that can be set in the <code>cog.toml</code> file at the root of a repository.</p><h2 id="general" tabindex="-1"><a class="header-anchor" href="#general" aria-hidden="true">#</a> General</h2><h3 id="tag-prefix" tabindex="-1"><a class="header-anchor" href="#tag-prefix" aria-hidden="true">#</a> <code>tag_prefix</code></h3>',4),d=t(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: set a tag prefix value for cocogitto. For instance if you have a <code>v</code> as a tag prefix, cocogitto will generate version starting with <code>v</code> and commands like <code>cog changelog</code> will pick only those versions.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">tag_prefix</span> = <span class="hljs-string">&quot;v&quot;</span>
</code></pre></div></li>`,4),h=e("p",null,"Also see:",-1),g=e("h3",{id:"branch-whitelist",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#branch-whitelist","aria-hidden":"true"},"#"),a(),e("code",null,"branch_whitelist")],-1),m=t(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: A list of glob patterns to allow bumping only on matching branches.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">branch_whitelist</span> = [ <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-string">&quot;release/**&quot;</span> ]
</code></pre></div></li>`,4),_=e("p",null,"Also see:",-1),f=e("h3",{id:"ignore-merge-commits",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ignore-merge-commits","aria-hidden":"true"},"#"),a(),e("code",null,"ignore_merge_commits")],-1),b=t(`<li><p>Type: <code>boolean</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default: <code>false</code></p></li><li><p>Description: whether to ignore or to lint merge commits.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">ignore_merge_commits</span> = <span class="hljs-literal">true</span>
</code></pre></div></li>`,5),q=e("p",null,"Also see:",-1),j=e("h2",{id:"commit-types",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#commit-types","aria-hidden":"true"},"#"),a(" Commit Types")],-1),k=t(`<li><p>Type: <code>Hashmap&lt;String, CommitType&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: extend the allowed commit types, creating a new <code>cog commit</code> command and allowing to generate changelog entries for the given type. Can also be used to override the default commit types.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[commit_types]</span>
<span class="hljs-attr">hotfix</span> = { changelog_title = <span class="hljs-string">&quot;Hotfixes&quot;</span> }
<span class="hljs-attr">chore</span> = { changelog_title = <span class="hljs-string">&quot;Hotfixes&quot;</span>, omit_from_changelog = <span class="hljs-literal">true</span> }
<span class="hljs-attr">release</span> = { changelog_title = <span class="hljs-string">&quot;Releases&quot;</span> }
</code></pre></div></li>`,4),x=e("p",null,"Also see:",-1),v=t(`<h3 id="changelog-title" tabindex="-1"><a class="header-anchor" href="#changelog-title" aria-hidden="true">#</a> <code>changelog_title</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>false</code></li><li>Description: change the changelog title for the given commit type.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[commit_types]</span>
<span class="hljs-attr">chore</span> = { changelog_title = <span class="hljs-string">&quot;Misc&quot;</span> }
<span class="hljs-attr">hotfix</span> = { changelog_title = <span class="hljs-string">&quot;Hot fix&quot;</span> }
</code></pre></div></li></ul><h3 id="omit-from-changelog" tabindex="-1"><a class="header-anchor" href="#omit-from-changelog" aria-hidden="true">#</a> <code>omit_from_changelog</code></h3><ul><li>Type: <code>Bool</code></li><li>Optional: <code>true</code></li><li>Default value: <code>false</code></li><li>Description: do not generate changelog entries for the given commit type.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[commit_types]</span>
<span class="hljs-attr">chore</span> = { changelog_title = <span class="hljs-string">&quot;Chore&quot;</span>, omit_from_changelog = <span class="hljs-literal">true</span> }
</code></pre></div></li></ul><h2 id="bump-config" tabindex="-1"><a class="header-anchor" href="#bump-config" aria-hidden="true">#</a> Bump config</h2><h3 id="pre-bump-hooks" tabindex="-1"><a class="header-anchor" href="#pre-bump-hooks" aria-hidden="true">#</a> <code>pre_bump_hooks</code></h3>`,6),y=t(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute before a version bump.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;sh -c \\&quot;./ci/check_branch.sh\\&quot;&quot;</span>,
    <span class="hljs-string">&quot;cargo test -- --test-threads 1&quot;</span>,
    <span class="hljs-string">&quot;cargo clippy&quot;</span>,
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo bump {{version}}&quot;</span>,
]
</code></pre></div></li>`,4),D=e("p",null,"Also see:",-1),w=e("h3",{id:"post-bump-hooks",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#post-bump-hooks","aria-hidden":"true"},"#"),a(),e("code",null,"post_bump_hooks")],-1),U=t(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute after a version bump.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;git push&quot;</span>,
    <span class="hljs-string">&quot;git push origin {{version}}&quot;</span>,
    <span class="hljs-string">&quot;cargo package&quot;</span>,
    <span class="hljs-string">&quot;cargo publish&quot;</span>
]
</code></pre></div></li>`,4),A=e("p",null,"Also see:",-1),T=e("h3",{id:"bump-profiles",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bump-profiles","aria-hidden":"true"},"#"),a(),e("code",null,"bump_profiles")],-1),E=e("li",null,[e("p",null,[a("Type: "),e("code",null,"Hashmap<String, BumpProfile>")])],-1),O=e("li",null,[e("p",null,[a("Optional: "),e("code",null,"true")])],-1),S=e("code",null,"cog bump --hook-profile <profile_name>",-1),C=t(`<li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[bump_profiles.hotfix]</span>
<span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo bump {{version}}&quot;</span>,
]

<span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo package&quot;</span>,
    <span class="hljs-string">&quot;cargo publish&quot;</span>
]
</code></pre></div></li>`,1),B=e("p",null,"Also see:",-1),V=e("h3",{id:"skip-ci",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#skip-ci","aria-hidden":"true"},"#"),a(),e("code",null,"skip_ci")],-1),L=t(`<li>Type: <code>String</code></li><li>Optional: <code>true</code></li><li>Description: A &quot;skip-ci&quot; string to add to the commits when using the <code>bump</code> or <code>commit</code> commands. Default value is <code>[skip ci]</code>.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">skip_ci</span> = <span class="hljs-string">&quot;[ci-skip]&quot;</span>
</code></pre></div></li>`,4),P=e("h3",{id:"skip-untracked",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#skip-untracked","aria-hidden":"true"},"#"),a(),e("code",null,"skip_untracked")],-1),H=t(`<li>Type: <code>boolean</code></li><li>Optional: <code>true</code></li><li>Default value: <code>false</code></li><li>Description: Allows to perform bump even if there are untracked or uncommited changes.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">skip_untracked</span> = <span class="hljs-literal">true</span>
</code></pre></div></li>`,5),M=t(`<h3 id="disable-changelog" tabindex="-1"><a class="header-anchor" href="#disable-changelog" aria-hidden="true">#</a> <code>disable_changelog</code></h3><ul><li>Type: <code>boolean</code></li><li>Optional: <code>true</code></li><li>Default value: <code>false</code></li><li>Description: Disable changelog generation when bumping.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">disable_changelog</span> = <span class="hljs-literal">true</span>
</code></pre></div></li></ul><h2 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog" aria-hidden="true">#</a> Changelog</h2><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> <code>path</code></h3>`,4),N=t(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default value: <code>&quot;CHANGELOG.md&quot;</code></p></li><li><p>Description: path the repository markdown changelog.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">path</span> = <span class="hljs-string">&quot;my_changelog.md&quot;</span>
</code></pre></div></li>`,5),G=e("p",null,"Also see:",-1),R=e("h3",{id:"template",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#template","aria-hidden":"true"},"#"),a(),e("code",null,"template")],-1),F=t(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default value: <code>&quot;default&quot;</code></p></li><li><p>Description: name of the builtin template to use for changelog generation or path to a custom template. Note that <code>remote</code>, <code>repository</code> and <code>owner</code> are mandatory if the &quot;remote&quot; built-in template us used or if your custom template make use of those variables.</p></li><li><p>Built-in templates : <code>default</code>, <code>remote</code>, <code>full_hash</code></p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;full_hash&quot;</span>
</code></pre></div></li>`,6),z=e("p",null,"Also see:",-1),J=e("h3",{id:"remote",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#remote","aria-hidden":"true"},"#"),a(),e("code",null,"remote")],-1),I=t(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: domain name of the git platform hosting the repository, used for Markdown link generation in changelogs. when provided <code>repository</code> and <code>owner</code> are also required.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;remote&quot;</span>
<span class="hljs-attr">remote</span> = <span class="hljs-string">&quot;github.com&quot;</span>
<span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
<span class="hljs-attr">owner</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
</code></pre></div></li>`,4),K=e("p",null,"Also see:",-1),Q=e("h3",{id:"repository",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repository","aria-hidden":"true"},"#"),a(),e("code",null,"repository")],-1),W=t(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: name of the repository on the remote git platform.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;remote&quot;</span>
<span class="hljs-attr">remote</span> = <span class="hljs-string">&quot;github.com&quot;</span>
<span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
<span class="hljs-attr">owner</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
</code></pre></div></li>`,4),X=e("p",null,"Also see:",-1),Y=e("h3",{id:"owner",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#owner","aria-hidden":"true"},"#"),a(),e("code",null,"owner")],-1),Z=t(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: owner of the repository on the remote git platform.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;remote&quot;</span>
<span class="hljs-attr">remote</span> = <span class="hljs-string">&quot;github.com&quot;</span>
<span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
<span class="hljs-attr">owner</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
</code></pre></div></li>`,4),$=e("p",null,"Also see:",-1),ee=e("h3",{id:"authors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#authors","aria-hidden":"true"},"#"),a(),e("code",null,"authors")],-1),ae=t(`<li><p>Type: <code>Array&lt;Author&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: A list of commit authors with their git signature and git platform username to generate Markdown links in changelogs.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code>  <span class="hljs-section">[changelog]</span>
  <span class="hljs-attr">authors</span> = [
    { signature = <span class="hljs-string">&quot;Paul Delafosse&quot;</span>, username = <span class="hljs-string">&quot;oknozor&quot;</span> },
    { signature = <span class="hljs-string">&quot;Jack Dorland&quot;</span>, username = <span class="hljs-string">&quot;jackdorland&quot;</span> },
    { signature = <span class="hljs-string">&quot;Mike Lubinets&quot;</span>, username = <span class="hljs-string">&quot;mersinvald&quot;</span> },
    { signature = <span class="hljs-string">&quot;Marcin Puc&quot;</span>, username = <span class="hljs-string">&quot;tranzystorek-io&quot;</span> },
    { signature = <span class="hljs-string">&quot;Renault Fernandes&quot;</span>, username = <span class="hljs-string">&quot;renaultfernandes&quot;</span> },
    { signature = <span class="hljs-string">&quot;Pieter Joost van de Sande&quot;</span>, username = <span class="hljs-string">&quot;pjvds&quot;</span> },
    { signature = <span class="hljs-string">&quot;orhun&quot;</span>, username = <span class="hljs-string">&quot;orhun&quot;</span> },
    { signature = <span class="hljs-string">&quot;Danny Tatom&quot;</span>, username = <span class="hljs-string">&quot;its-danny&quot;</span> },
]
</code></pre></div></li>`,4),se=e("p",null,"Also see:",-1),le=t(`<h2 id="mono-repository-config" tabindex="-1"><a class="header-anchor" href="#mono-repository-config" aria-hidden="true">#</a> Mono-repository config</h2><h3 id="monorepo-version-separator" tabindex="-1"><a class="header-anchor" href="#monorepo-version-separator" aria-hidden="true">#</a> <code>monorepo_version_separator</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>true</code></li><li>Description: set a package tag separator. For instance if you have a <code>-</code> as package separator, cocogitto will generate monorepo package version starting with the package name followed by the optional prefix and package version (ex: <code>my-package-v1.0.0</code>)</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">monorepo_version_separator</span> = <span class="hljs-string">&quot;-&quot;</span>
</code></pre></div></li></ul><h3 id="pre-package-bump-hooks" tabindex="-1"><a class="header-anchor" href="#pre-package-bump-hooks" aria-hidden="true">#</a> <code>pre_package_bump_hooks</code></h3><ul><li>Type: <code>Array&lt;String&gt;</code></li><li>Optional: <code>true</code></li><li>Description: an array of command executed before every package bump.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]
</code></pre></div></li></ul><h3 id="post-package-bump-hooks" tabindex="-1"><a class="header-anchor" href="#post-package-bump-hooks" aria-hidden="true">#</a> <code>post_package_bump_hooks</code></h3><ul><li>Type: <code>Array&lt;String&gt;</code></li><li>Optional: <code>true</code></li><li>Description: an array of command executed after every package bump.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]
</code></pre></div></li></ul><h2 id="mono-repository-packages" tabindex="-1"><a class="header-anchor" href="#mono-repository-packages" aria-hidden="true">#</a> Mono-repository packages</h2><h3 id="path-1" tabindex="-1"><a class="header-anchor" href="#path-1" aria-hidden="true">#</a> <code>path</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>false</code></li><li>Description: set the package path.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[packages]</span>
<span class="hljs-attr">my_package</span> = { path = <span class="hljs-string">&quot;packages/my_package&quot;</span> }
</code></pre></div></li></ul><h3 id="changelog-path" tabindex="-1"><a class="header-anchor" href="#changelog-path" aria-hidden="true">#</a> <code>changelog_path</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>true</code></li><li>Default: <code>{path}/CHANGELOG.md</code></li><li>Description: overrides the default changelog path, allowing to set an absolute path.</li><li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[packages]</span>
<span class="hljs-attr">my_package</span> = { path = <span class="hljs-string">&quot;packages/my_package&quot;</span>, changelog_path = <span class="hljs-string">&quot;changelogs/my_package.md&quot;</span> }
</code></pre></div></li></ul><h3 id="public-api" tabindex="-1"><a class="header-anchor" href="#public-api" aria-hidden="true">#</a> <code>public_api</code></h3>`,13),oe=t(`<li><p>Type: <code>boolean</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default: <code>true</code></p></li><li><p>Description: if set to false package will not trigger global version bump.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[packages]</span>
<span class="hljs-attr">my_package</span> = { path = <span class="hljs-string">&quot;packages/my_package&quot;</span>, public_api = <span class="hljs-literal">false</span> }
</code></pre></div></li>`,5),te=e("p",null,"Also see:",-1),ne=e("h3",{id:"pre-bump-hooks-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pre-bump-hooks-1","aria-hidden":"true"},"#"),a(),e("code",null,"pre_bump_hooks")],-1),ie=t(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute before a package bump.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]
</code></pre></div></li>`,4),pe=e("p",null,"Also see:",-1),ce=e("h3",{id:"post-bump-hooks-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#post-bump-hooks-1","aria-hidden":"true"},"#"),a(),e("code",null,"post_bump_hooks")],-1),re=t(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute after a version bump.</p></li><li><p>Example:</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;echo {{latest}} bumped to {{version}}&quot;</span>,
]
</code></pre></div></li>`,4),ue=e("p",null,"Also see:",-1),de=e("h3",{id:"bump-profiles-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bump-profiles-1","aria-hidden":"true"},"#"),a(),e("code",null,"bump_profiles")],-1),he=e("li",null,[a("Type: "),e("code",null,"Hashmap<String, BumpProfile>")],-1),ge=e("li",null,[a("Optional: "),e("code",null,"true")],-1),me=e("code",null,"cog bump --hook-profile <profile_name>",-1),_e=t(`<li>Example:<div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="hljs-section">[packages.my-package]</span>
<span class="hljs-attr">path</span> = <span class="hljs-string">&quot;packages/my-package&quot;</span>

<span class="hljs-section">[bump_profiles.hotfix]</span>
<span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]

<span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo package&quot;</span>,
]
</code></pre></div></li>`,1);function fe(be,qe){const s=i("RouterLink");return p(),c("div",null,[u,e("ul",null,[d,e("li",null,[h,e("p",null,[l(s,{to:"/guide/#tag-prefix"},{default:o(()=>[a("User guide -> Tag prefix")]),_:1})])])]),g,e("ul",null,[m,e("li",null,[_,e("p",null,[l(s,{to:"/guide/#branch-whitelist"},{default:o(()=>[a("User guide -> Branch whitelist")]),_:1})])])]),f,e("ul",null,[b,e("li",null,[q,e("p",null,[l(s,{to:"/guide/#deal-with-merge-commit"},{default:o(()=>[a("User guide -> Deal with merge commit")]),_:1})])])]),j,e("ul",null,[k,e("li",null,[x,e("p",null,[l(s,{to:"/guide/#custom-commit-types"},{default:o(()=>[a("User guide -> Custom commit types")]),_:1})])])]),v,e("ul",null,[y,e("li",null,[D,e("ul",null,[e("li",null,[l(s,{to:"/guide/#auto-bump"},{default:o(()=>[a("User guide -> Automatic Versioning")]),_:1})]),e("li",null,[l(s,{to:"/guide/#pre-bump-hooks"},{default:o(()=>[a("User guide -> Pre-bump hooks")]),_:1})]),e("li",null,[l(s,{to:"/guide/#version-dsl"},{default:o(()=>[a("User guide -> Version DSL")]),_:1})])])])]),w,e("ul",null,[U,e("li",null,[A,e("ul",null,[e("li",null,[l(s,{to:"/guide/#auto-bump"},{default:o(()=>[a("User guide -> Automatic Versioning")]),_:1})]),e("li",null,[l(s,{to:"/guide/#post-bump-hooks"},{default:o(()=>[a("User guide -> Post-bump hooks")]),_:1})]),e("li",null,[l(s,{to:"/guide/#version-dsl"},{default:o(()=>[a("User guide -> Version DSL")]),_:1})])])])]),T,e("ul",null,[E,O,e("li",null,[e("p",null,[a("Description: add additional "),l(s,{to:"/config/#pre_bump_hooks"},{default:o(()=>[a("pre-bump")]),_:1}),a(" and "),l(s,{to:"/config/#post_bump_hooks"},{default:o(()=>[a("post-bump")]),_:1}),a(" hooks profile. a profile can be used with the "),S,a(" flag.")])]),C,e("li",null,[B,e("ul",null,[e("li",null,[l(s,{to:"/guide/#auto-bump"},{default:o(()=>[a("User guide -> Automatic Versioning")]),_:1})]),e("li",null,[l(s,{to:"/guide/#post-bump-hooks"},{default:o(()=>[a("User guide -> Post-bump hooks")]),_:1})]),e("li",null,[l(s,{to:"/guide/#pre-bump-hooks"},{default:o(()=>[a("User guide -> Pre-bump hooks")]),_:1})]),e("li",null,[l(s,{to:"/guide/#version-dsl"},{default:o(()=>[a("User guide -> Version DSL")]),_:1})]),e("li",null,[l(s,{to:"/guide/guide/#bump-profiles"},{default:o(()=>[a("User guide -> Bump profiles")]),_:1})])])])]),V,e("ul",null,[L,e("li",null,[a("Also see: "),e("ul",null,[e("li",null,[l(s,{to:"/guide/#make-cocogitto-skip-ci-cd"},{default:o(()=>[a("User guide -> Make Cocogitto skip CI CD")]),_:1})])])])]),P,e("ul",null,[H,e("li",null,[a("Also see: "),e("ul",null,[e("li",null,[l(s,{to:"/guide/#skip-untracked-or-uncommited-changes"},{default:o(()=>[a("User guide -> Skip untracked or uncommited changes")]),_:1})])])])]),M,e("ul",null,[N,e("li",null,[G,e("ul",null,[e("li",null,[l(s,{to:"/guide/#auto-bump"},{default:o(()=>[a("User guide -> Automatic Versioning")]),_:1})]),e("li",null,[l(s,{to:"/guide/#changelogs"},{default:o(()=>[a("User guide -> Changelog")]),_:1})])])])]),R,e("ul",null,[F,e("li",null,[z,e("ul",null,[e("li",null,[l(s,{to:"/guide/#changelogs"},{default:o(()=>[a("User guide -> Changelog")]),_:1})]),e("li",null,[l(s,{to:"/guide/#built-in-templates"},{default:o(()=>[a("User guide -> Built-in templates")]),_:1})]),e("li",null,[l(s,{to:"/guide/#custom-templates"},{default:o(()=>[a("User guide -> Custom templates")]),_:1})])])])]),J,e("ul",null,[I,e("li",null,[K,e("ul",null,[e("li",null,[l(s,{to:"/guide/#changelogs"},{default:o(()=>[a("User guide -> Changelog")]),_:1})]),e("li",null,[l(s,{to:"/guide/#buiLt-in-templates"},{default:o(()=>[a("User guide -> Built-in templates")]),_:1})]),e("li",null,[l(s,{to:"/guide/#custom-templates"},{default:o(()=>[a("User guide -> Custom templates")]),_:1})])])])]),Q,e("ul",null,[W,e("li",null,[X,e("ul",null,[e("li",null,[l(s,{to:"/guide/#changelogs"},{default:o(()=>[a("User guide -> Changelog")]),_:1})]),e("li",null,[l(s,{to:"/guide/#buiLt-in-templates"},{default:o(()=>[a("User guide -> Built-in templates")]),_:1})]),e("li",null,[l(s,{to:"/guide/#custom-templates"},{default:o(()=>[a("User guide -> Custom templates")]),_:1})])])])]),Y,e("ul",null,[Z,e("li",null,[$,e("ul",null,[e("li",null,[l(s,{to:"/guide/#changelogs"},{default:o(()=>[a("User guide -> Changelog")]),_:1})]),e("li",null,[l(s,{to:"/guide/#buiLt-in-templates"},{default:o(()=>[a("User guide -> Built-in templates")]),_:1})]),e("li",null,[l(s,{to:"/guide/#custom-templates"},{default:o(()=>[a("User guide -> Custom templates")]),_:1})])])])]),ee,e("ul",null,[ae,e("li",null,[se,e("ul",null,[e("li",null,[l(s,{to:"/guide/#changelogs"},{default:o(()=>[a("User guide -> Changelog")]),_:1})]),e("li",null,[l(s,{to:"/guide/#buiLt-in-templates"},{default:o(()=>[a("User guide -> Built-in templates")]),_:1})])])])]),le,e("ul",null,[oe,e("li",null,[te,e("p",null,[l(s,{to:"/guide/#packages-configuration"},{default:o(()=>[a("User guide -> Package configuration")]),_:1})])])]),ne,e("ul",null,[ie,e("li",null,[pe,e("ul",null,[e("li",null,[l(s,{to:"/guide/#auto-bump"},{default:o(()=>[a("User guide -> Automatic Versioning")]),_:1})]),e("li",null,[l(s,{to:"/guide/#packages-hooks"},{default:o(()=>[a("User guide -> Automatic versioning for monorepo")]),_:1})]),e("li",null,[l(s,{to:"/guide/#post-bump-hooks"},{default:o(()=>[a("User guide -> Post-bump hooks")]),_:1})]),e("li",null,[l(s,{to:"/guide/#version-dsl"},{default:o(()=>[a("User guide -> Version DSL")]),_:1})])])])]),ce,e("ul",null,[re,e("li",null,[ue,e("ul",null,[e("li",null,[l(s,{to:"/guide/#auto-bump"},{default:o(()=>[a("User guide -> Automatic Versioning")]),_:1})]),e("li",null,[l(s,{to:"/guide/#packages-hooks"},{default:o(()=>[a("User guide -> Automatic versioning for monorepo")]),_:1})]),e("li",null,[l(s,{to:"/guide/#post-bump-hooks"},{default:o(()=>[a("User guide -> Post-bump hooks")]),_:1})]),e("li",null,[l(s,{to:"/guide/#version-dsl"},{default:o(()=>[a("User guide -> Version DSL")]),_:1})])])])]),de,e("ul",null,[he,ge,e("li",null,[a("Description: add additional per package "),l(s,{to:"/config/#pre_bump_hooks"},{default:o(()=>[a("pre-bump")]),_:1}),a(" and "),l(s,{to:"/config/#post_bump_hooks"},{default:o(()=>[a("post-bump")]),_:1}),a(" hooks profile. a profile can be used with the "),me,a(" flag.")]),_e])])}const ke=n(r,[["render",fe],["__file","index.html.vue"]]);export{ke as default};
